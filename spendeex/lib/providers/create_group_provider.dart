import 'package:flutter/widgets.dart';
import 'package:spendeex/core/auth_utils.dart';
import 'package:spendeex/data/repositories/group_repository.dart';
import 'package:spendeex/data/repositories/activity_logs_repository.dart';
import 'package:spendeex/data/models/group_model.dart';
import 'package:spendeex/data/models/group_members_model.dart';
import 'package:spendeex/data/models/activity_logs_model.dart';
import 'package:spendeex/presentation/screens/select_friend.dart';

class CreateGroupProvider with ChangeNotifier {
  final GroupRepository _groupRepo = GroupRepository();
  final ActivityLogsRepository _activityRepo = ActivityLogsRepository();

  String _title = '';
  String _description = '';
  String _category = '';
  List<Friend> _selectedMembers = [];
  bool _isLoading = false;

  // Getters
  String get title => _title;
  String get description => _description;
  String get category => _category;
  List<Friend> get selectedMembers => _selectedMembers;
  bool get isLoading => _isLoading;

  void updateTitle(String value) {
    _title = value.trim();
    notifyListeners();
  }

  void updateDescription(String value) {
    _description = value.trim();
    notifyListeners();
  }

  void updateCategory(String value) {
    _category = value.trim();
    notifyListeners();
  }

  void updateSelectedMembers(List<Friend> members) {
    _selectedMembers = List.from(members);
    notifyListeners();
  }

  Future<String?> createGroupWithMembers() async {
    if (_title.isEmpty) {
      return 'Group title is required';
    }

    if (_category.isEmpty) {
      return 'Please select a category';
    }

    final currentUserId = AuthUtils.getCurrentUserId();
    if (currentUserId == null) {
      return 'User not authenticated';
    }

    _isLoading = true;
    notifyListeners();

    try {
      // Check if group name already exists
      final exists = await _groupRepo.groupExists(_title);
      if (exists) {
        _isLoading = false;
        notifyListeners();
        return 'Group with this name already exists';
      }

      // Create the group
      final groupModel = GroupModel(
        id: '', // Will be generated by Firestore
        title: _title,
        description: _description,
        category: _category,
        createdBy: currentUserId,
        createdAt: DateTime.now(),
        participants: [], // We'll manage participants through group_members collection
      );

      final groupId = await _groupRepo.createGroup(groupModel);

      // Create group members list
      final List<GroupMembersModel> members = [];

      // Add the creator as admin
      members.add(GroupMembersModel(
        id: '',
        groupId: groupId,
        userId: currentUserId,
        role: 'admin',
        joinedAt: DateTime.now(),
      ));

      // Add selected friends as members
      for (final friend in _selectedMembers) {
        // Skip if it's the current user (already added as admin)
        if (friend.email != AuthUtils.getCurrentUserEmail()) {
          members.add(GroupMembersModel(
            id: '',
            groupId: groupId,
            userId: friend.id,
            role: 'member',
            joinedAt: DateTime.now(),
          ));
        }
      }

      // Add all members to the group
      await _groupRepo.addMultipleGroupMembers(members);

      // Log the group creation activity
      await _activityRepo.createActivityLog(ActivityLogsModel(
        id: '',
        userId: currentUserId,
        groupId: groupId,
        action: 'create_group',
        details: 'Created group "$_title" with ${_selectedMembers.length} members',
        timestamp: DateTime.now(),
      ));

      // Log member additions
      for (final friend in _selectedMembers) {
        if (friend.email != AuthUtils.getCurrentUserEmail()) {
          await _activityRepo.createActivityLog(ActivityLogsModel(
            id: '',
            userId: currentUserId,
            groupId: groupId,
            action: 'add_member',
            details: 'Added ${friend.name} (${friend.email}) to group',
            timestamp: DateTime.now(),
          ));
        }
      }

      _isLoading = false;
      notifyListeners();
      return null; // Success
    } catch (e) {
      _isLoading = false;
      notifyListeners();
      return 'Failed to create group: $e';
    }
  }

  void reset() {
    _title = '';
    _description = '';
    _category = '';
    _selectedMembers.clear();
    _isLoading = false;
    notifyListeners();
  }

  // Legacy method for backward compatibility
  void updateGroupDetails(String t, String d) {
    updateTitle(t);
    updateDescription(d);
  }

  // Legacy method for backward compatibility
  void updateCatgeory(String c) {
    updateCategory(c);
  }

  // Legacy method for backward compatibility
  Future<String?> createGroup() async {
    return await createGroupWithMembers();
  }
}
